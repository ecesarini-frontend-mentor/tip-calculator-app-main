class TipClicked {
    constructor(e) {
        this.e = e;
    }
    handleEvent(event) {
        switch(event.type) {
            case 'click':
                var clk = Array.from(this.e).indexOf(event.target);
                var frac;
                switch(clk) {
                    case 0:
                        frac = 0.05;
                        break;
                    case 1:
                        frac = 0.1;
                        break;
                    case 2:
                        frac = 0.15;
                        break;
                    case 3:
                        frac = 0.25;
                    case 4:
                        frac = 0.5;
                    case 5:
                        //frac = //get something
                    break;
                }
            console.log(frac);
            break;
        }
    }
}

function getFromCalc() {
    let bill = document.getElementsByClassName('ci-bill')[0].querySelector('input').value;
    let tip = document.getElementsByClassName('ci-tip-grid')[0].querySelectorAll('button');
    let tipClicked = new TipClicked(tip);
    tip.forEach((item) => {
        item.addEventListener('click', tipClicked);
    });
}
getFromCalc();

// Turn clicked event into object by Class and use inheriting in the constructor to get something from method or simply get a return from function calling eventhandler merging into call 
