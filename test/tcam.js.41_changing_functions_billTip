//TODO: reset 'style' and value using class and clicking on "RESET", validate input on 'bill' and 'people' by keyboard;
//TODO: look at #71 causes 'JSON parse errors' you find out pressing backspace (keyCode === 8)
//FIXING: focusout cursor lag

class Calc {
    constructor(c1, c2) {
        this.c1 = c1;
        this.c2 = c2;
    }
    checkClass(et, targetClass) {
        let cn = et.className.split(' ').indexOf(targetClass);
        if(cn !== -1) return true;
        else return false;
    }
    setStyle(elEv, et, cl) {
        if(elEv) elEv.classList.remove(cl);
        et.classList.add(cl);
    }
    checkAllProp(a, o) {
        let all = a.every(k => o.hasOwnProperty(k));
        if(all && Object.values(o).every(v => v !== '')) { 
            return all;   
        }
        else {
            return false;
        }         
    }

    handleBillPeople(e, t) {
        let et = e.target;

        function validDigit(n, t) {
            let billReplace = /[^0-9.]+/;
            let peopleReplace = /[^0-9]+/;
            if(t === 'bill') return n.replace(billReplace, '');
            else if(t === 'people') return n.replace(peopleReplace, '');
        }

        switch(e.type) {
            case 'click':
                if( localStorage[t] ) {
                    if( localStorage[t].length === 1 || et.value !== '' || et.value !== 0 ) {
                        const pos = et.value.length;
                        et.setSelectionRange(pos, pos);
                    } else {
                        et.value = '';
                    }
                } else {
                    et.value = '';
                }
                break;
            case 'input':
                if(et.value <= '0') et.value = '';
                if(et.value && this.checkClass(et, 'ci-bill-input')) { 
                    localStorage[t] = Number.parseFloat(et.value);
                }
                else if(et.value && this.checkClass(et, 'ci-people-input')) {
                    localStorage[t] = Number.parseInt(et.value);
                }
                if(localStorage[t] < 0) {
                    et.value = '';
                }
                break;
            case 'focusout':
                if( !localStorage[t] && et.value === '') {
                    et.value = '0';
                }
                else if(localStorage[t]) {
                    et.value = localStorage[t].toString();
                }
                et.style.caretColour = 'transparent';
                break;
            case 'keyup':
                et.value = validDigit(et.value, t);
                break;
            /*case 'keydown': 
                let keyC = e.keyCode;
                switch(keyC) {
                    case 8:
                        if(localStorage[t].length === 0) localStorage.removeItem(t);
                        if(this.checkClass(et, 'ci-bill-input')) { 
                            localStorage[t] = et.value.slice(0,-1);
                        }
                        else if(this.checkClass(et, 'ci-people-input')) {
                            localStorage[t] = et.value.slice(0,-1);
                        }
                    break;
                }
                break;*/
        }
        this.getResults();
    }
    handleTips(e) {
        let et = e.target;
        let ect = e.currentTarget;
        let lc = ect.lastElementChild;
        let customClass = 'ci-tg-input-clicked';
        let tipClicked = ect.querySelector('.' + customClass);
        switch(et.type) {
            case 'button':
                switch(e.type) {                    
                    case 'click':
                        lc.style = '';
                        lc.value = 'Custom';
                        this.setStyle(tipClicked, et, customClass);
                        break;
                    case 'mouseup':
                        localStorage['tip'] = Number.parseInt(et.value.slice(0, -1)); 
                        break;
                }
            break;
            case 'text':
                switch(e.type) {
                    case 'click':
                        et.value = '';
                        this.setStyle(tipClicked, et, customClass);
                        break;
                    case 'focus':
                        et.style.borderColor = this.c1;
                        if(et.value != '' || !isNaN(et.value)) et.value = '';
                        break;
                    case 'input':
                        et.style.borderColor = this.c1;
                        if(isNaN(et.value)) et.value = et.value.slice(0,-1);
                        if(et.value < 0) {
                            et.value = '0';
                        }
                        else if(et.value > 100) {
                            et.value = '100';
                        }
                        localStorage['tip'] = Number.parseInt(et.value);
                        break;
                    case 'keydown':
                        if(e.keyCode === 13) {
                            et.style.color = this.c2;
                            et.style.backgroundColor = this.c1;
                        }
                        break;
                    case 'keyup':
                        if(e.keyCode === 13) {
                            localStorage['tip'] == Number.parseInt(et.value);
                            if(et.value.slice(-1) != '%') et.value = et.value + '%';
                            et.style.color = this.c2;
                            et.style.backgroundColor = this.c1;
                        }
                        break;
                    case 'focusout':
                        if(et.value != '') { 
                            if(et.value.slice(-1) != '%') et.value = et.value + '%';                    
                            et.style.color = this.c2
                            et.style.backgroundColor = this.c1;
                        } else {
                            et.value = 'Custom';
                            et.style = '';
                        }
                        break;
                }
                break;
        }
        this.getResults();
    }
    getResults() {
        let billInserted, tipInserted, peopleInserted;
        let tipResult = document.querySelector('.crg-tip-result');
        let totalResult = document.querySelector('.crg-total-result');
        let allProp = this.checkAllProp(['bill', 'tip', 'people'], localStorage);
        
        if(allProp) {
            //'localStorage' just stores strings. You need JSON.parse to extract type https://www.javascripttutorial.net/web-apis/javascript-localstorage/#:~:text=The%20localStorage%20can%20store%20only,the%20localStorage%20using%20the%20JSON.
            billInserted = JSON.parse(localStorage.bill);
            tipInserted = JSON.parse(localStorage.tip) * 0.01;
            peopleInserted = JSON.parse(localStorage.people);

            if(peopleInserted !== 0) {
                let tipPerPerson = billInserted * tipInserted  / peopleInserted;
                let totalPerPerson = billInserted / peopleInserted + tipPerPerson;
                if(Number.isInteger(tipPerPerson)) tipResult.innerText = tipPerPerson;
                else tipResult.innerText = Number.parseFloat(tipPerPerson).toFixed(2);
                if(Number.isInteger(totalPerPerson)) totalResult.innerText = totalPerPerson;
                else totalResult.innerText = Number.parseFloat(totalPerPerson).toFixed(2);
            } else {
                tipResult.innerText = 0;
                totalResult.innerText = 0;
            }
        }

    }
    handleEvent(event) {
        //console.log(event.target);
        if(this.checkClass(event.target, 'ci-tg-input')) this.handleTips(event);
        if(this.checkClass(event.target, 'ci-bill-input')) this.handleBillPeople(event, 'bill');
        if(this.checkClass(event.target, 'ci-people-input')) this.handleBillPeople(event, 'people');
    }
} 

class ResetValue {
    constructor(container, c1, c2) {
        this.container = container;
        this.inputElements = document.querySelectorAll('input');
        this.billElement = undefined;
        this.tipElement = undefined;
        this.peopleElement = undefined;
        this.resultValue = document.querySelectorAll('.ci-grid-result');
        this.c1 = c1;
        this.c2 = c2;
        this.init();
    }

    checkClass(el, cl) {
        for(let i = 0; i < el.length; i++)
            if(el[i].className.split(' ').indexOf(cl) !== -1) return el[i];        
    }
    findElementsToClear() {
        this.billElement = this.checkClass(this.inputElements, 'ci-bill-input');
        this.tipElement = this.checkClass(this.inputElements, 'ci-tg-input');
        this.peopleElement = this.checkClass(this.inputElements, 'ci-people-input');
    }
    /*styleClick(e) {
        let et = e.target;
        if(e.type === 'mousedown') {
                et.style.color = this.c1;
                et.style.backgroundColor = this.c2;
        }
    }*/
    clearValue() {
            [this.billElement, this.tipElement, this.peopleElement].forEach( item => {
                item.style = '';
                if(item.className.split(' ').indexOf('ci-tg-input-custom') !== -1) item.innerText = 'Custom';
            });
            this.resultValue.forEach( item => {
                item.innerText = '0';
            });
    }
    init() {
        for(let key in localStorage) { //Inspect about 'for in, ...'
            if(Object.hasOwnProperty(key)) delete localStorage[key];         
        }
        this.findElementsToClear();
        //this.container.addEventListener('click', this.clearValue.bind(this)());
        this.container.addEventListener('click', this.clearValue());
        //this.container.addEventListener('mousedown', e => this.styleClick(e));
    }
    /*handleEvent(e) {
        switch(e.type) {
            case 'click':
                this.container.addEventListener
        }
    }*/

}


function tcamValue() {
    document.addEventListener('DOMContentLoaded', function() { 
        localStorage.clear();
    });
    let bill = document.querySelector('.ci-bill');
    let tip = document.querySelector('.ci-tip-grid');
    let people = document.querySelector('.ci-people');

    let c1 = 'hsl(172, 67%, 45%)';
    let c2 = 'hsl(183, 100%, 15%)';
    
    let calc = new Calc(c1, c2);

    let resButton = document.querySelector('.cr-button-reset');
    let resetValue = new ResetValue(resButton, c1, c2);
    new ResetValue(resButton, c1, c2);
    
    ['click', 'input', 'focusout', 'keyup', 'keydown'].forEach((ev) => {
        bill.addEventListener(ev, calc);
        people.addEventListener(ev, calc);
    });
    ['click', 'mouseup', 'input', 'focus', 'focusout', 'keyup', 'keydown'].forEach((ev) => {
        tip.addEventListener(ev, calc);
    });
}

tcamValue();